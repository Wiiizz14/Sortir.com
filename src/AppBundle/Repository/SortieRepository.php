<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Sortie;
use DateTime;

/**
 * SortieRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SortieRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param $idSite
     * @return array
     * @throws \Exception
     */
    public function getSortiesOnlyBySite($idSite)
    {

        $em = $this->getEntityManager('s');
        $queryBuilder = $em->createQueryBuilder();
        $queryBuilder->select('s')
            ->from(Sortie::class, 's')
            ->innerJoin("s.site", "site", "WITH", "site.id = :idSite")
            ->where("s.dateDebut > :date")
            ->setParameter("idSite", $idSite)
            ->setParameter('date', new DateTime("-30 days"));
        return $queryBuilder->getQuery()->getResult();
    }

    /**
     * @param $user
     * @param $idSite
     * @param $isOrganisateur
     * @param $isInscrit
     * @param $isNotInscrit
     * @param $isArchive
     * @return array
     * @throws \Exception
     */
    public function getSortiesByParameters($user, $idSite, $isOrganisateur, $isInscrit, $isNotInscrit, $isArchive)
    {

        $em = $this->getEntityManager('s');
        $queryBuilder = $em->createQueryBuilder();
        $queryBuilder->select('s')
            ->from(Sortie::class, 's')
            ->innerJoin("s.site", "site")
            ->where("site.id = :idSite")
            ->setParameter("idSite", $idSite);


        if (($isInscrit || $isNotInscrit) && !($isInscrit && $isNotInscrit)) {
            if ($isInscrit) {
                $queryBuilder->leftJoin('s.participants', "p");
                $queryBuilder->andWhere("p = :idCurrentUser");
            }
            if ($isNotInscrit) {
                $queryBuilder->leftJoin('s.participants', "p");
                $queryBuilder->andWhere("p != :idCurrentUser")
                    ->andWhere("s.organisateur != :idCurrentUser")
                    ->orWhere("s.participants IS EMPTY")
                    ->andWhere("s.organisateur != :idCurrentUser");
            }
            $queryBuilder->setParameter("idCurrentUser", $user);
        }

        if ($isArchive == false) {
            $queryBuilder->andWhere("s.dateDebut > :date")
                ->setParameter('date', new DateTime("-30 days"));
        } else if (!($isOrganisateur || $isInscrit || $isNotInscrit)) {
            $queryBuilder->andWhere("s.dateDebut <= :date")
                ->setParameter('date', new DateTime("-30 days"));
        }
        if ($isOrganisateur) {
            if ($isArchive || $isInscrit || $isNotInscrit) {
                $queryBuilder->orWhere("s.organisateur = :idCurrentUser");
            } else {
                $queryBuilder->andWhere("s.organisateur = :idCurrentUser");
            }
            $queryBuilder->setParameter("idCurrentUser", $user);
        }


        return $queryBuilder->getQuery()->getResult();
    }

}
